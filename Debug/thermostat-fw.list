
thermostat-fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002c8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800045c  0800045c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800045c  0800045c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  0800045c  0800045c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800045c  0800045c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800045c  0800045c  0001045c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000460  08000460  00010460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000464  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000468  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000468  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001445  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004a5  00000000  00000000  00021479  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001c0  00000000  00000000  00021920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000178  00000000  00000000  00021ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000074c  00000000  00000000  00021c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001ea0  00000000  00000000  000223a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007dade  00000000  00000000  00024244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a1d22  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000528  00000000  00000000  000a1d74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000444 	.word	0x08000444

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	08000444 	.word	0x08000444

080001d4 <main>:


*/


int main(void){
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0

	setBit(RCC->APB1ENR, 0);        // Povoleni hodin casovace TIM2
 80001da:	4b49      	ldr	r3, [pc, #292]	; (8000300 <main+0x12c>)
 80001dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80001de:	4a48      	ldr	r2, [pc, #288]	; (8000300 <main+0x12c>)
 80001e0:	f043 0301 	orr.w	r3, r3, #1
 80001e4:	6413      	str	r3, [r2, #64]	; 0x40

    TIM2->PSC = 15;                    // preddelicka 16 na 1 MHz
 80001e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001ea:	220f      	movs	r2, #15
 80001ec:	629a      	str	r2, [r3, #40]	; 0x28
    TIM2->ARR = 1000;                    // autoreload registr na 1000 Hz
 80001ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80001f6:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM2->CCR2 = 250;
 80001f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001fc:	22fa      	movs	r2, #250	; 0xfa
 80001fe:	639a      	str	r2, [r3, #56]	; 0x38
    setBit(TIM2->EGR, 0);
 8000200:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000204:	695b      	ldr	r3, [r3, #20]
 8000206:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800020a:	f043 0301 	orr.w	r3, r3, #1
 800020e:	6153      	str	r3, [r2, #20]



    setBit(TIM2->CCMR1, 14);            // PWM1 mode pro CC2
 8000210:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000214:	699b      	ldr	r3, [r3, #24]
 8000216:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800021a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800021e:	6193      	str	r3, [r2, #24]
    setBit(TIM2->CCMR1, 13);            // PWM1 mode pro CC2
 8000220:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000224:	699b      	ldr	r3, [r3, #24]
 8000226:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800022a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800022e:	6193      	str	r3, [r2, #24]
    setBit(TIM2->CCER, 4);            // Povoleni vystupu CC2
 8000230:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000234:	6a1b      	ldr	r3, [r3, #32]
 8000236:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800023a:	f043 0310 	orr.w	r3, r3, #16
 800023e:	6213      	str	r3, [r2, #32]

	setBit(RCC->AHB1ENR, 1);        // Povoleni hodin pro GPIOB
 8000240:	4b2f      	ldr	r3, [pc, #188]	; (8000300 <main+0x12c>)
 8000242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000244:	4a2e      	ldr	r2, [pc, #184]	; (8000300 <main+0x12c>)
 8000246:	f043 0302 	orr.w	r3, r3, #2
 800024a:	6313      	str	r3, [r2, #48]	; 0x30


    setBit(GPIOB->MODER, 7);        // Nastaveni AF pro PB3
 800024c:	4b2d      	ldr	r3, [pc, #180]	; (8000304 <main+0x130>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4a2c      	ldr	r2, [pc, #176]	; (8000304 <main+0x130>)
 8000252:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000256:	6013      	str	r3, [r2, #0]
    clrBit(GPIOB->MODER, 6);        // Nastaveni AF pro PB3
 8000258:	4b2a      	ldr	r3, [pc, #168]	; (8000304 <main+0x130>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	4a29      	ldr	r2, [pc, #164]	; (8000304 <main+0x130>)
 800025e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000262:	6013      	str	r3, [r2, #0]

    //clrBit(GPIOB->MODER, 7);        // Nastaveni
    //setBit(GPIOB->MODER, 6);        // Nastaveni

    clrBit(GPIOB->PUPDR, 7);   // vypnuti pull-up/pull-down
 8000264:	4b27      	ldr	r3, [pc, #156]	; (8000304 <main+0x130>)
 8000266:	68db      	ldr	r3, [r3, #12]
 8000268:	4a26      	ldr	r2, [pc, #152]	; (8000304 <main+0x130>)
 800026a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800026e:	60d3      	str	r3, [r2, #12]
    clrBit(GPIOB->PUPDR, 6);
 8000270:	4b24      	ldr	r3, [pc, #144]	; (8000304 <main+0x130>)
 8000272:	68db      	ldr	r3, [r3, #12]
 8000274:	4a23      	ldr	r2, [pc, #140]	; (8000304 <main+0x130>)
 8000276:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800027a:	60d3      	str	r3, [r2, #12]

    setBit(GPIOB->OSPEEDR, 6);    // nastaveni rychlosti brany na medium speed
 800027c:	4b21      	ldr	r3, [pc, #132]	; (8000304 <main+0x130>)
 800027e:	689b      	ldr	r3, [r3, #8]
 8000280:	4a20      	ldr	r2, [pc, #128]	; (8000304 <main+0x130>)
 8000282:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000286:	6093      	str	r3, [r2, #8]
    clrBit(GPIOB->OSPEEDR, 7);
 8000288:	4b1e      	ldr	r3, [pc, #120]	; (8000304 <main+0x130>)
 800028a:	689b      	ldr	r3, [r3, #8]
 800028c:	4a1d      	ldr	r2, [pc, #116]	; (8000304 <main+0x130>)
 800028e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000292:	6093      	str	r3, [r2, #8]

    //clrBit(GPIOB->OTYPER, 3);


    setBit(GPIOB->AFR[0], 12);        // Nastaveni AF1 pro pin PB3
 8000294:	4b1b      	ldr	r3, [pc, #108]	; (8000304 <main+0x130>)
 8000296:	6a1b      	ldr	r3, [r3, #32]
 8000298:	4a1a      	ldr	r2, [pc, #104]	; (8000304 <main+0x130>)
 800029a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800029e:	6213      	str	r3, [r2, #32]

    clrBit(TIM2->SR, 0);             // Obnoveni status registru po prerueseni
 80002a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002a4:	691b      	ldr	r3, [r3, #16]
 80002a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002aa:	f023 0301 	bic.w	r3, r3, #1
 80002ae:	6113      	str	r3, [r2, #16]
    setBit(TIM2->CR1, 0);            // Povoleni casovace TIM2 CEN
 80002b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002ba:	f043 0301 	orr.w	r3, r3, #1
 80002be:	6013      	str	r3, [r2, #0]


    setBit(RCC->CR, 0);             // Nastaveni HSI jako zroj hodin (16MHz)
 80002c0:	4b0f      	ldr	r3, [pc, #60]	; (8000300 <main+0x12c>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a0e      	ldr	r2, [pc, #56]	; (8000300 <main+0x12c>)
 80002c6:	f043 0301 	orr.w	r3, r3, #1
 80002ca:	6013      	str	r3, [r2, #0]
    int i = 0;
 80002cc:	2300      	movs	r3, #0
 80002ce:	607b      	str	r3, [r7, #4]
    while(1){

    	for(int k=0;k<10000;k++);
 80002d0:	2300      	movs	r3, #0
 80002d2:	603b      	str	r3, [r7, #0]
 80002d4:	e002      	b.n	80002dc <main+0x108>
 80002d6:	683b      	ldr	r3, [r7, #0]
 80002d8:	3301      	adds	r3, #1
 80002da:	603b      	str	r3, [r7, #0]
 80002dc:	683b      	ldr	r3, [r7, #0]
 80002de:	f242 720f 	movw	r2, #9999	; 0x270f
 80002e2:	4293      	cmp	r3, r2
 80002e4:	ddf7      	ble.n	80002d6 <main+0x102>
		TIM2->CCR2 = i++;
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	1c5a      	adds	r2, r3, #1
 80002ea:	607a      	str	r2, [r7, #4]
 80002ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002f0:	6393      	str	r3, [r2, #56]	; 0x38
		if(i >1000)
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80002f8:	ddea      	ble.n	80002d0 <main+0xfc>
			i = 0;
 80002fa:	2300      	movs	r3, #0
 80002fc:	607b      	str	r3, [r7, #4]
    	for(int k=0;k<10000;k++);
 80002fe:	e7e7      	b.n	80002d0 <main+0xfc>
 8000300:	40023800 	.word	0x40023800
 8000304:	40020400 	.word	0x40020400

08000308 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800030c:	e7fe      	b.n	800030c <NMI_Handler+0x4>

0800030e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800030e:	b480      	push	{r7}
 8000310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000312:	e7fe      	b.n	8000312 <HardFault_Handler+0x4>

08000314 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000314:	b480      	push	{r7}
 8000316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000318:	e7fe      	b.n	8000318 <MemManage_Handler+0x4>

0800031a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800031a:	b480      	push	{r7}
 800031c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800031e:	e7fe      	b.n	800031e <BusFault_Handler+0x4>

08000320 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000324:	e7fe      	b.n	8000324 <UsageFault_Handler+0x4>

08000326 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000326:	b480      	push	{r7}
 8000328:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800032a:	bf00      	nop
 800032c:	46bd      	mov	sp, r7
 800032e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000332:	4770      	bx	lr

08000334 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000338:	bf00      	nop
 800033a:	46bd      	mov	sp, r7
 800033c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000340:	4770      	bx	lr

08000342 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000342:	b480      	push	{r7}
 8000344:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000346:	bf00      	nop
 8000348:	46bd      	mov	sp, r7
 800034a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034e:	4770      	bx	lr

08000350 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000354:	f000 f83e 	bl	80003d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000358:	bf00      	nop
 800035a:	bd80      	pop	{r7, pc}

0800035c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000360:	4b06      	ldr	r3, [pc, #24]	; (800037c <SystemInit+0x20>)
 8000362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000366:	4a05      	ldr	r2, [pc, #20]	; (800037c <SystemInit+0x20>)
 8000368:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800036c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000370:	bf00      	nop
 8000372:	46bd      	mov	sp, r7
 8000374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000378:	4770      	bx	lr
 800037a:	bf00      	nop
 800037c:	e000ed00 	.word	0xe000ed00

08000380 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000380:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000384:	480d      	ldr	r0, [pc, #52]	; (80003bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000386:	490e      	ldr	r1, [pc, #56]	; (80003c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000388:	4a0e      	ldr	r2, [pc, #56]	; (80003c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800038a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800038c:	e002      	b.n	8000394 <LoopCopyDataInit>

0800038e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800038e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000390:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000392:	3304      	adds	r3, #4

08000394 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000394:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000396:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000398:	d3f9      	bcc.n	800038e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800039a:	4a0b      	ldr	r2, [pc, #44]	; (80003c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800039c:	4c0b      	ldr	r4, [pc, #44]	; (80003cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800039e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003a0:	e001      	b.n	80003a6 <LoopFillZerobss>

080003a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003a4:	3204      	adds	r2, #4

080003a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003a8:	d3fb      	bcc.n	80003a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80003aa:	f7ff ffd7 	bl	800035c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003ae:	f000 f825 	bl	80003fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003b2:	f7ff ff0f 	bl	80001d4 <main>
  bx  lr    
 80003b6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80003b8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80003bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003c0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80003c4:	08000464 	.word	0x08000464
  ldr r2, =_sbss
 80003c8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80003cc:	20000024 	.word	0x20000024

080003d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003d0:	e7fe      	b.n	80003d0 <ADC_IRQHandler>
	...

080003d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80003d8:	4b06      	ldr	r3, [pc, #24]	; (80003f4 <HAL_IncTick+0x20>)
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	461a      	mov	r2, r3
 80003de:	4b06      	ldr	r3, [pc, #24]	; (80003f8 <HAL_IncTick+0x24>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	4413      	add	r3, r2
 80003e4:	4a04      	ldr	r2, [pc, #16]	; (80003f8 <HAL_IncTick+0x24>)
 80003e6:	6013      	str	r3, [r2, #0]
}
 80003e8:	bf00      	nop
 80003ea:	46bd      	mov	sp, r7
 80003ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f0:	4770      	bx	lr
 80003f2:	bf00      	nop
 80003f4:	20000000 	.word	0x20000000
 80003f8:	20000020 	.word	0x20000020

080003fc <__libc_init_array>:
 80003fc:	b570      	push	{r4, r5, r6, lr}
 80003fe:	4d0d      	ldr	r5, [pc, #52]	; (8000434 <__libc_init_array+0x38>)
 8000400:	4c0d      	ldr	r4, [pc, #52]	; (8000438 <__libc_init_array+0x3c>)
 8000402:	1b64      	subs	r4, r4, r5
 8000404:	10a4      	asrs	r4, r4, #2
 8000406:	2600      	movs	r6, #0
 8000408:	42a6      	cmp	r6, r4
 800040a:	d109      	bne.n	8000420 <__libc_init_array+0x24>
 800040c:	4d0b      	ldr	r5, [pc, #44]	; (800043c <__libc_init_array+0x40>)
 800040e:	4c0c      	ldr	r4, [pc, #48]	; (8000440 <__libc_init_array+0x44>)
 8000410:	f000 f818 	bl	8000444 <_init>
 8000414:	1b64      	subs	r4, r4, r5
 8000416:	10a4      	asrs	r4, r4, #2
 8000418:	2600      	movs	r6, #0
 800041a:	42a6      	cmp	r6, r4
 800041c:	d105      	bne.n	800042a <__libc_init_array+0x2e>
 800041e:	bd70      	pop	{r4, r5, r6, pc}
 8000420:	f855 3b04 	ldr.w	r3, [r5], #4
 8000424:	4798      	blx	r3
 8000426:	3601      	adds	r6, #1
 8000428:	e7ee      	b.n	8000408 <__libc_init_array+0xc>
 800042a:	f855 3b04 	ldr.w	r3, [r5], #4
 800042e:	4798      	blx	r3
 8000430:	3601      	adds	r6, #1
 8000432:	e7f2      	b.n	800041a <__libc_init_array+0x1e>
 8000434:	0800045c 	.word	0x0800045c
 8000438:	0800045c 	.word	0x0800045c
 800043c:	0800045c 	.word	0x0800045c
 8000440:	08000460 	.word	0x08000460

08000444 <_init>:
 8000444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000446:	bf00      	nop
 8000448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800044a:	bc08      	pop	{r3}
 800044c:	469e      	mov	lr, r3
 800044e:	4770      	bx	lr

08000450 <_fini>:
 8000450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000452:	bf00      	nop
 8000454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000456:	bc08      	pop	{r3}
 8000458:	469e      	mov	lr, r3
 800045a:	4770      	bx	lr
